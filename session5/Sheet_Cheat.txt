import numpy as np
import saga_api
from math import *
import random

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

import scipy.stats as sst
from scipy.optimize import curve_fit



a = np.empty((3,4),dtype=float)
a.fill(-1.)
print a

print a.ndim
print a.shape

a[0] # 0. Zeile
a[1] # 1. Zeile
a[:,0] # 0. Spalte
A[0,0] # Wert in 0. Zeile und 0. Spalte


meanCol = np.mean(a,axis=0)
meanRow = np.mean(a,axis=1)



def linefit(x,a,c):
    return a*x+c

def fit2(x,a,b,c):
    return a*x**2+b*x+c

plt.plot(pArray[:,2], pArray[:,3],'r.')
plt.title("Treeheight vs. Terrain Height",fontsize=12)
plt.ylabel('tree height in m')
plt.xlabel('height in m')
plt.savefig("Scatterplot.png",dpi=300)
plt.close()

PC = saga_api.SG_Get_Data_Manager().Add_PointCloud("Session5/TreeHeightProfile.sg-pts-z")
PCOut= saga_api.SG_Create_PointCloud()
PCOut.Add_Field(saga_api.CSG_String("TreeHeight"), saga_api.SG_DATATYPE_Double)

Data = []
for i in range(PC.Get_Count()):
    x = PC.Get_X(i)
    y = PC.Get_Y(i)
    Height = PC.Get_Z(i)
    TreeHeight = PC.Get_Attribute(i,0)

    Point = np.array([x,y,Height])
    Shift = np.array([500,500,0])
    Point = Point+Shift

    PCOut.Add_Point(Point[0],Point[1],Point[2])
    PCOut.Set_Attribute(i,0, TreeHeight)

    Data.append([x,y,Height,TreeHeight])

pArray = np.array(Data)
print(pArray)

numBins = 100
stats = sst.binned_statistic(pArray[:,2], pArray[:,3], statistic='mean', bins=numBins, range=None)
statsheights = stats[1][0:numBins] #get centre of bin
stats_treeheights = (stats[0]) #get mean of all samples in bin

popt,pcov=curve_fit(linefit,statsheights,stats_treeheights)

residuals = stats_treeheights - linefit(statsheights, *popt)
ss_res = np.sum(residuals**2)
ss_tot = np.sum((stats_treeheights-np.mean(stats_treeheights))**2)
r_squared = 1 - (ss_res / ss_tot)
print("R_Squared: ", r_squared)


xLine = np.linspace(min(statsheights), max(statsheights), num=1000)
yLine = linefit(xLine,*popt)

plt.plot(statsheights, stats_treeheights,'r.')
plt.plot(xLine,yLine,'b-')

PCOut.Save("Session5/PCOut.sg-pts-z")
